name: Build and Deploy Ahauros Backend

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Install dependencies
      working-directory: ./backend
      run: npm ci
      
    - name: Run tests
      working-directory: ./backend
      run: npm test
      
    - name: Build Docker image
      working-directory: ./backend
      run: docker build -t ahauros-backend .
      
    - name: Test Docker container
      working-directory: ./backend
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        docker run -d --name test-container -e OPENAI_API_KEY=$OPENAI_API_KEY -p 3001:3001 ahauros-backend
        sleep 10
        curl -f http://localhost:3001/health || exit 1
        docker stop test-container
        docker rm test-container
        
    - name: Deploy to production
      if: github.ref == 'refs/heads/main'
      working-directory: ./backend
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      run: |
        # Tag and push to ECR
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
        docker tag ahauros-backend:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/ahauros-backend:latest
        docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/ahauros-backend:latest
        
        # Update ECS service
        aws ecs update-service --cluster ahauros-cluster --service ahauros-backend-service --force-new-deployment
